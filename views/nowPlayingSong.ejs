<!DOCTYPE html>
<html lang="es">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Now Playing - Song Only</title>
  <script src="https://cdn.tailwindcss.com"></script>
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.7.2/css/all.min.css" />
  <script>
    tailwind.config = {
      theme: {
        extend: {
          colors: {
            'spotify-green': '#ffffff',
            'dark-green': 'rgba(51, 51, 51, 0.4)', // Cambiado a un tono más oscuro y transparente
            'green-300': '#ffffff', // Texto blanco
            'green-900/30': '#4d4d4d',
          }
        }
      }
    }
  </script>
  <style>
    @font-face {
      font-family: "Agrandir";
      src: local("Agrandir Regular"), local("Agrandir-Regular"),
        url("/PPAgrandir-Regular.otf") format("opentype");
      font-weight: normal;
      font-style: normal;
      font-display: swap;
    }

    html {
      font-family: "Agrandir", sans-serif;
      color: #ffffff;
    }

    .player-shadow {
      filter: drop-shadow(0 4px 12px rgba(0, 0, 0, 0.15));
    }

    .fade-in {
      animation: fadeIn 1s forwards;
    }

    .fade-out {
      animation: fadeOut 1s forwards;
    }

    @keyframes fadeIn {
      from {
        opacity: 0;
      }

      to {
        opacity: 1;
      }
    }

    @keyframes fadeOut {
      from {
        opacity: 1;
      }

      to {
        opacity: 0;
      }
    }
  </style>
</head>

<body>
  <div id="playerContainer" class="fixed top-4 right-4 flex flex-col gap-2 w-[280px] hidden">
    <div class="bg-dark-green rounded-lg p-3 player-shadow">
      <div class="flex gap-3 items-center justify-between">
        <div class="flex flex-col justify-center min-w-0 flex-1 text-right">
          <h1 id="songName" class="text-lg font-bold text-spotify-green leading-tight truncate overflow-hidden">
            <span id="scrollingSongName"></span>
          </h1>
          <p id="artistName" class="text-sm text-green-300 opacity-90 truncate overflow-hidden">
            <span id="scrollingArtistName"></span>
          </p>
        </div>
        <div class="w-16 h-16 flex-shrink-0 rounded-lg overflow-hidden">
          <img id="albumCover" src="" alt="Album Cover" class="w-full h-full object-cover">
        </div>
      </div>
    </div>
  </div>

  <script>
    let currentSongId = null;
    let isPlaying = false;
    let fadeOutTimeout;
    let errorCount = 0;
    const MAX_ERRORS = 5;
    const VIEW_TYPE = 'simple'; // Identificador único para esta vista

    document.addEventListener('DOMContentLoaded', () => {
      console.log('NowPlaying Simple view loaded');
      fetchNowPlaying(true);
      setInterval(fetchNowPlaying, 1000);
    });

    async function fetchNowPlaying(initialLoad = false) {
      try {
        const response = await fetch('/api/nowPlaying');
        
        if (!response.ok) {
          const errorData = await response.json().catch(() => ({ error: 'Unknown error' }));
          console.error('Error response:', errorData);
          
          if (response.status === 401 || errorData.requiresAuth) {
            console.log('Token inválido o reautenticación requerida, redirigiendo a autenticación');
            window.location.href = '/auth/spotify';
            return;
          }
          
          if (response.status === 404 && errorData.requiresAuth) {
            console.log('Usuario no encontrado, redirigiendo a autenticación');
            window.location.href = '/auth/spotify';
            return;
          }
          
          throw new Error(`HTTP ${response.status}: ${errorData.message || 'Error desconocido'}`);
        }
        
        const nowPlaying = await response.json();
        errorCount = 0;

        if (!nowPlaying.is_playing || !nowPlaying.item) {
          handleNoSongPlaying();
          return;
        }

        // Verificar que tenemos una canción válida
        if (!nowPlaying.item.id) {
          console.warn('Canción sin ID válido');
          return;
        }

        if (nowPlaying.item.id !== currentSongId) {
          currentSongId = nowPlaying.item.id;
          console.log('Cambio de canción detectado (simple):', nowPlaying.item.name);
          await handleSongChange(nowPlaying);
        }

        if (!isPlaying) {
          isPlaying = true;
          await showPlayerContainer();
        }

      } catch (error) {
        console.error('Error fetching now playing:', error);
        errorCount++;
        
        if (errorCount >= MAX_ERRORS) {
          console.error('Demasiados errores consecutivos, redirigiendo a autenticación');
          window.location.href = '/auth/spotify';
        }
      }
    }

    function handleNoSongPlaying() {
      if (isPlaying) {
        console.log('No hay canción reproduciéndose (simple)');
        isPlaying = false;
        currentSongId = null;
        clearTimeout(fadeOutTimeout);
        fadeOutTimeout = setTimeout(() => {
          const playerContainer = document.getElementById('playerContainer');
          if (playerContainer) {
            playerContainer.classList.add('fade-out');
            setTimeout(() => {
              playerContainer.classList.add('hidden');
              playerContainer.classList.remove('fade-out');
            }, 1000);
          }
        }, 5000);
      }
    }

    async function handleSongChange(nowPlaying) {
      await fadeOutPlayerContainer();
      updateSimplePlayer(nowPlaying);
      await fadeInPlayerContainer();
    }

    function updateSimplePlayer(nowPlaying) {
      // Solo actualizar información de la canción, sin progreso
      const albumCover = document.getElementById('albumCover');
      const scrollingSongName = document.getElementById('scrollingSongName');
      const scrollingArtistName = document.getElementById('scrollingArtistName');
      
      if (albumCover && nowPlaying.item.album.images[0]) {
        albumCover.src = nowPlaying.item.album.images[0].url;
      }
      
      if (scrollingSongName) {
        scrollingSongName.textContent = nowPlaying.item.name;
      }
      
      if (scrollingArtistName) {
        scrollingArtistName.textContent = nowPlaying.item.artists.map(artist => artist.name).join(', ');
      }
    }

    async function showPlayerContainer() {
      const playerContainer = document.getElementById('playerContainer');
      const scrollingSongName = document.getElementById('scrollingSongName');
      
      if (!playerContainer || !scrollingSongName) {
        return;
      }

      // Esperar a que el contenido esté listo
      if (!scrollingSongName.textContent) {
        await new Promise(resolve => setTimeout(resolve, 500));
      }

      playerContainer.classList.remove('hidden');
      playerContainer.classList.add('fade-in');
      setTimeout(() => {
        playerContainer.classList.remove('fade-in');
      }, 1000);
    }

    function fadeOutPlayerContainer() {
      return new Promise((resolve) => {
        const playerContainer = document.getElementById('playerContainer');
        if (!playerContainer) {
          resolve();
          return;
        }
        
        playerContainer.classList.add('fade-out');
        setTimeout(() => {
          playerContainer.classList.remove('fade-out');
          resolve();
        }, 1000);
      });
    }

    function fadeInPlayerContainer() {
      return new Promise((resolve) => {
        const playerContainer = document.getElementById('playerContainer');
        if (!playerContainer) {
          resolve();
          return;
        }
        
        playerContainer.classList.add('fade-in');
        setTimeout(() => {
          playerContainer.classList.remove('fade-in');
          resolve();
        }, 1000);
      });
    }
  </script>
</body>

</html>